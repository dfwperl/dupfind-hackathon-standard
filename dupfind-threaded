#!/usr/bin/env perl

=pod

=head1 THREADED VERSION OF DUPFIND

...which seems to have memory issues, but at double the speed or
more for large datasets.

UPDATE: turns out memory issues aren't that bad, even for 100GB of
data spanning anywhere between 5K and 37K files

=cut

use 5.010;

BEGIN { $|++; $SIG{TERM} = $SIG{INT} = \&end_wait_thread_pool; }

use warnings;
use strict;

use threads;
use threads::shared;
use Thread::Queue;

my $digests = &share( {} ); # shared between threads, so we put this right up top

use File::Util;
use Digest::xxHash 'xxhash_hex';
use Getopt::Long;
use Term::Prompt 'prompt';
use Benchmark ':hireswallclock';

my $opts =
{
   dir      => undef,
   help     => undef,
   bytes    => 1024 ** 3, # 1 GB max read
   maxdepth => 10,
   prompt   => 0,
   remove   => 0,
   links    => 0,
   threads  => 10,
   format   => 'human', # formatting options are either "human" or "robot"
   weed     => 1,
   qsize    => 30,
};

GetOptions
(
   'dir|d=s'      => \$opts->{dir},
   'bytes|b=i'    => \$opts->{bytes},
   'maxdepth|m=i' => \$opts->{maxdepth},
   'links|l'      => \$opts->{links},
   'prompt|p'     => \$opts->{prompt},
   'remove|x'     => \$opts->{remove},
   'delete'       => \$opts->{remove}, # <-- that's not a typo
   'help|h|?'     => \$opts->{help},
   'threads|t=i'  => \$opts->{threads},
   'format|f=s'   => \$opts->{format},
   'weed|w=s'     => \$opts->{weed},
   'qsize|q=i'    => \$opts->{qsize},
) or die usage();

die usage() unless defined $opts->{dir};

$opts->{remove}++  if $opts->{prompt};
$opts->{threads}++ unless $opts->{threads};
$opts->{weed} = 0  if $opts->{weed} =~ /^(n|no)$/i;

my $pool_queue     = Thread::Queue->new;
my $worker_queues  = {};
my $thread_term    :shared = 0;
my $threads_init   :shared = 0;

my $ftl = File::Util->new
(
   {
      use_flock   => 0,
      diag        => 1,
      read_limit  => $opts->{bytes},
      abort_depth => $opts->{maxdepth},
      onfail      => 'undefined',
   }
);

my $benchmarks =
{
   scanfs   => { },
   prune    => { },
   weed     => { },
   digest   => { },
   remove   => { },
   run      => { },
};

my ( $cmp_count, $size_dup_count, $dup_count ) = run();

say <<__SUMMARY__;
------------------------------
** THREADS...............$opts->{threads}
** TOTAL FILES SCANNED...$cmp_count
** TOTAL SAME SIZE.......$size_dup_count
** TOTAL ACTUAL DUPES....$dup_count
      -- TIMES --
** TREE SCAN TIME........$benchmarks->{scanfs}->{result}
** HARDLINK PRUNE TIME...$benchmarks->{prune}->{result}
** WEED-OUT TIME.........$benchmarks->{weed}->{result}
** CRYPTO-HASHING TIME...$benchmarks->{digest}->{result}
** DELETION TIME.........$benchmarks->{remove}->{result}
** TOTAL RUN TIME........$benchmarks->{run}->{result}
__SUMMARY__

exit;



sub run
{
   bench_this( run => 'start' );

   my ( $size_dups, $cmp_count ) = scanfs();

   my $size_dup_count = 0;

   ( $size_dups, $size_dup_count ) = prune_hardlinks( $size_dups );

   $size_dups = weed_out( $size_dups );

   my $digest_dups = digest_the_rest( $size_dups );

   undef $size_dups; # free up some RAM

   say '** DISPLAYING OUTPUT'; say '-' x 30;

   my $dup_count = show_dups( $digest_dups );

   delete_dups( $digest_dups ) if $opts->{remove};

   bench_this( run => 'end' );

   calculate_bench_times();

   return $cmp_count, $size_dup_count, $dup_count;

}

sub scanfs
{
   bench_this( scanfs => 'start' );

   say '** SCANNING ALL FILES FOR SIZE DUPLICATES';

   my ( $sizes, $cmp_count ) = get_dup_sizes();

   bench_this( scanfs => 'end' );

   say '** NO DUPLICATES FOUND' and exit unless keys %$sizes;

   return $sizes, $cmp_count
}

sub prune_hardlinks
{
   my $size_dups = shift;

   say '** PRUNING HARD LINKS';

   bench_this( prune => 'start' );

   $size_dups = toss_out_hardlinks( $size_dups );

   # you have to do this for this threaded version of dupfind, and it has
   # to happen after you've already pruned out the hardlinks (above)
   {
      $digests->{'zero size'} = &shared_clone( $size_dups->{0} )
         if ref $size_dups->{0};

      delete $size_dups->{0};
   }

   my $size_dups_count = keys %$size_dups;

   bench_this( prune => 'end' );

   say '** NO DUPLICATES FOUND' and exit unless $size_dups_count;

   return $size_dups, $size_dups_count;
}

sub weed_out
{
   my $size_dups = shift;

   say '** WEEDING-OUT FILES THAT ARE OBVIOUSLY DIFFERENT';

   bench_this( weed => 'start' );

   $size_dups = remove_obviously_different( $size_dups );

   bench_this( weed => 'end' );

   say '** NO DUPLICATES FOUND' and exit unless keys %$size_dups;

   return $size_dups;
}

sub digest_the_rest
{
   my $size_dups = shift;

   say '** CHECKSUMMING SIZE DUPLICATES';

   bench_this( digest => 'start' );

   my $digest_dups = get_dup_digests( $size_dups );

   bench_this( digest => 'end' );

   say '** NO DUPLICATES FOUND' and exit unless keys %$digest_dups;

   return $digest_dups;
}

sub create_thread_pool
{
   for ( 1 .. $opts->{threads} )
   {
      my $thread_queue  = Thread::Queue->new;

      my $worker_thread = threads->create( worker => $thread_queue );

      $worker_queues->{ $worker_thread->tid } = $thread_queue;
   }

   lock $threads_init; $threads_init++;
}

sub end_wait_thread_pool
{
   exit unless $threads_init;

   $thread_term++;

   $worker_queues->{ $_ }->end for keys %$worker_queues;

   $pool_queue->end;

   $_->join for threads->list;
}

sub worker
{
   my $work_queue = shift;
   my $tid = threads->tid;

   local $/;

   while ( !$thread_term )
   {
      # signal to the thread poolq that we are ready to work

      $pool_queue->enqueue( $tid );

      # wait for some filename to be put into my work queue

      my $file = $work_queue->dequeue;

      last unless defined $file;

      open my $fh, '<', $file or next;

      my $data = <$fh>;

      close $fh;

      my $digest = xxhash_hex $data, 0;

      lock $digests;

      $digests->{ $digest } ||= &share( [] );

      push @{ $digests->{ $digest } }, $file;
   }
}

sub remove_obviously_different
{
   # weed out files that are obviously different, based on the last
   # few bytes in the file.  This saves us from unnecessary hashing

   my $size_matches = shift;
   my $zero_sized   = delete $size_matches->{0};

   for my $same_size ( keys %$size_matches )
   {
      my @group = sort { $a cmp $b } @{ $size_matches->{ $same_size } };

      my $same_last_bytes = {};

      for my $file ( @group )
      {
         my $last_bytes = get_file_lastbytes( $file => $same_size );

         push @{ $same_last_bytes->{ $last_bytes } }, $file;
      }

      # delete obvious non-dupe files from the group of same-size files
      # by virtue of the fact that they will be a single length arrayref

      delete $same_last_bytes->{ $_ }
         for grep { @{ $same_last_bytes->{ $_ } } == 1 }
         keys %$same_last_bytes;

      # recompose the arrayref of filenames for the same-size file grouping
      # but leave out the files we just weeded out from the group

      $size_matches->{ $same_size } = []; # start fresh

      push @{ $size_matches->{ $same_size } },
         map { @{ $same_last_bytes->{ $_ } } }
         keys %$same_last_bytes;
   }

   $size_matches->{0} = $zero_sized if ref $zero_sized;

   return $size_matches;
}

sub get_file_lastbytes
{
   my ( $file, $len ) = @_;

   my $buff;

   sysopen my $fh, $file, 0;

   return unless defined $fh;

   sysseek $fh, $len - 1024, 0;

   sysread $fh, $buff, 1024;

   close $fh or return;

   return $buff;
}

sub toss_out_hardlinks
{
   my $size_dups = shift;

   for my $size ( keys %$size_dups )
   {
      my $group = $size_dups->{ $size };
      my %dev_inodes;

      # this will automatically throw out hardlinks, with the only surviving
      # file being the first asciibetically-sorted entry
      $dev_inodes{ join '', ( stat $_ )[0,1] } = $_ for reverse sort @$group;

      if ( scalar keys %dev_inodes == 1 )
      {
         delete $size_dups->{ $size };
      }
      else
      {
         $size_dups->{ $size } = [ values %dev_inodes ];
      }
   }

   return $size_dups;
}

sub get_dup_sizes
{
   my ( $sizes, $cmp_count ) = ( {}, 0 );

   $ftl->list_dir
   (
      $opts->{dir} =>
      {
         recurse => 1,
         callback => sub
            {
               my ( $selfdir, $subdirs, $files ) = @_;

               push @{ $sizes->{ -s $_ } }, $_
                  for grep { !-l $_ && defined -s $_ } @$files;
            }
      }
   );

   $cmp_count = keys %$sizes;

   delete $sizes->{ $_ }
      for grep { @{ $sizes->{ $_ } } == 1 }
      keys %$sizes;

   return $sizes, $cmp_count;
}

sub get_dup_digests
{
   my $sizes  = shift;
   my $queued = 0;

   create_thread_pool();

   sub get_tid
   {
      my $tid = $pool_queue->dequeue;

      say 'TID IS ' . $tid;

      return $tid;
   }

   my $tid = get_tid();

   SIZESCAN: for my $size ( keys %$sizes )
   {
      my $group = $sizes->{ $size };

      for my $file ( @$group )
      {
         $worker_queues->{ $tid }->enqueue( $file ) if !$thread_term;

         $queued++;

         $tid = get_tid() and $queued = 0 if $queued == $opts->{qsize} - 1;

         last SIZESCAN unless defined $tid;
      }
   }

   # ...tell the threads to exit, blocking wait

   end_wait_thread_pool();

   # get rid of non-dupes
   delete $digests->{ $_ }
      for grep { @{ $digests->{ $_ } } == 1 }
      keys %$digests;

   my $priv_digests = {};

   # sort dup groupings
   for my $hash ( keys %$digests )
   {
      my @group = @{ $digests->{ $hash } };

      $priv_digests->{ $hash } = [ sort { $a cmp $b } @group ];
   }

   undef $digests;

   return $priv_digests;
}

sub show_dups
{
   my $digests = shift;
   my $dupes  = 0;

   my $for_humans = sub # human-readable output
   {
      my ( $hash, $files ) = @_;

      say sprintf 'DUPLICATES (hash: %s | size: %db)', $hash, -s $$files[0];

      say "   $_" for @$files;

      say '';
   };

   my $for_robots = sub # machine parseable output
   {
      my ( $hash, $files ) = @_;

      say join "\t", @$files
   };

   my $formatter = $opts->{format} eq 'human' ? $for_humans : $for_robots;

   for my $hash
   (
      sort { $digests->{ $a }->[0] cmp $digests->{ $b }->[0] } keys %$digests
   )
   {
      my $files = $digests->{ $hash };

      $formatter->( $hash => $files );

      $dupes += @$files - 1;
   }

   return $dupes
}

sub delete_dups
{
   my $digests = shift;

   bench_this( remove => 'start' );

   my $removed = 0;

   for my $hash ( keys %$digests )
   {
      my $group = $digests->{ $hash };

      say sprintf 'KEPT    (%s) %s', $hash, $group->[0];

      shift @$group;

      for my $dup ( @$group )
      {
         if ( $opts->{prompt} )
         {
            unless ( prompt 'y', "REMOVE DUPLICATE? $dup", '', 'n' )
            {
               say sprintf 'KEPT    (%s) %s', $hash, $dup;

               next;
            }
         }

         unlink $dup or warn "COULD NOT REMOVE $dup!  $!" and next;

         $removed++;

         say sprintf 'REMOVED (%s) %s', $hash, $dup;
      }

      say '--';
   }

   say "** TOTAL DUPLICATE FILES REMOVED: $removed";

   bench_this( remove => 'end' );
}

sub bench_this
{
   my ( $mark, $start_end ) = @_;

   $benchmarks->{ $mark }->{ $start_end } = Benchmark->new();
}

sub calculate_bench_times
{
   for my $mark ( keys %$benchmarks )
   {
      next unless $benchmarks->{ $mark }->{start};

      $benchmarks->{ $mark }->{result} =
         timestr timediff
         (
            $benchmarks->{ $mark }->{end},
            $benchmarks->{ $mark }->{start}
         );
   }

   $benchmarks->{weed}->{result}   ||= 'did not weed';
   $benchmarks->{remove}->{result} ||= 'no deletions';
}

# This is just the help message:

sub usage { <<'__USAGE__' }
USAGE:
   dupfind [ --options ] --dir ./path/to/search/

EXAMPLE:
   dupfind --threads 4 --format robot --maxdepth 100 --bytes 1099511627776 --dir /dedup

DESCRIPTION:
   finds duplicate files in a directory tree.  Options are explained
   in detail below.  Options marked with an asterisk (*) are not yet
   implemented and are planned for a future release

ARGUMENTS AND FLAGS:
   -b, --bytes    Maximum size in bytes that you are willing to compare.
                  The current default maximum is 1 gigabyte.

                  Sizing guide:
                     1 kilobyte = 1024
                     1 megabyte = 1048576        or 1024 ** 2
                     1 gigabyte = 1073741824     or 1024 ** 3
                     1 terabyte = 1099511627776  or 1024 ** 4

   -d, --dir      Name of the directory you want to search for duplicates

   -f, --format   Specify either "human" or "robot".  Human-readable output
                  is generated for easy viewing by default.  If you want output
                  that is machine-parseable, specify "robot"

*  -l, --links    Follow symlinks (by default it does not).  Because this
                  has some safety implications and is a complex matter,
                  it is not yet supported.  Sorry, check back later.

   -m, --maxdepth The maximum directory depth to which the comparison
                  scan will recurse.  Note that this does not mean the
                  total number of directories to scan.

   -p, --prompt   Interactively prompt user to delete detected duplicates

   -q, --qsize    Number of files each thread should process at a time. The
                  the default is 30.

   -x, --remove   Delete (WITHOUT PROMPTING) all but the first copy if
                  duplicate files are found.  This will leave you with no
                  duplicate files when execution is finished.

   -t, --threads  Number of threads to use for file comparisons.  Defaults
                  to 10, but lower numbers will do better on systems with
                  fewer cores.  You'll usually get best performance using a
                  number of threads equal to the number of logical processors
                  on your system, plus 1.

   -w, --weed     Either yes or no.  (Default yes).  Tries to avoid unnecessary
                  file hashing by weeding out potential duplicates with a
                  simple, quick comparison of the last 1024 bytes of data in
                  same-size files.  This typically produces very significant
                  performance gains, especially with large numbers of files.

__USAGE__
